-- A program is defined as a (possibly empty) list of statements separated by semicolons,
-- followed by an expression which will be evaluated to produce an output.

entrypoints Program;

Program. Program ::= [Stmt] Exp ;

--This is the syntax from BNFC to define a list of statements
[].    [Stmt] ::= ;
(:).   [Stmt] ::= Stmt ";" [Stmt] ;

-- TYPES --------------------------------------------------------------

TNat.    Type1 ::= "nat";
TBool.   Type1 ::= "bool";
TU.      Type1 ::= "U";
TTop.    Type1 ::= "Top";
TBot.    Type1 ::= "Bot";
TPair.   Type1 ::= "[" Type "," Type "]";
TVec.    Type1 ::= "Vector" Type Exp;
TFun.    Type  ::= Type1 "->" Type;
TDepFun. Type  ::= "(" Ident ":" Type ")" "->" Type;

_. Type2 ::= "(" Type ")";
_. Type1 ::= Type2;
_. Type  ::= Type1;

-- STATEMENTS ---------------------------------------------------------

SLet. Stmt ::= "val" Ident "=" Exp ;
SLetAnn. Stmt ::= "val" Ident ":" Type "=" Exp ;
SFun. Stmt ::= "fun" Ident "(" Ident ":" Type ") =" Exp ;

-- EXPRESSIONS --------------------------------------------------------

-- Lambda expressions
ELam.    Exp8 ::= "\\" Ident "->" Exp;
ELamAnn. Exp8 ::= "\\" "(" Ident ":" Type ")" "->" Exp;

-- Universe type as expression
EU. Exp8 ::= "U";

-- Type expressions as values (for dependent types)
ENat.  Exp8 ::= "nat";
EBool. Exp8 ::= "bool";
ETop.  Exp8 ::= "Top";
EBot.  Exp8 ::= "Bot";

EPairType. Exp8 ::= "[" Exp "," Exp "]";
EVecType.  Exp8 ::= "Vector" Exp8 Exp8;

-- Function type expressions (lower precedence than application)
EFunType. Exp1 ::= Exp2 "->" Exp1;
EDepFunType. Exp1 ::= "(" Ident ":" Exp ")" "->" Exp1;

-- Natural numbers
EZero. Exp7  ::= "zero";
ESuc.  Exp7  ::= "suc" Exp7;

-- Arithmetic (only addition and multiplication for natural numbers)
EMul. Exp6  ::= Exp6 "*" Exp7;
EAdd. Exp5  ::= Exp5 "+" Exp6;

-- Booleans
ETrue.  Exp3  ::= "True";
EFalse. Exp3  ::= "False";

ENot.   Exp3  ::= "!" Exp3;
EAnd.   Exp2  ::= Exp2 "&&" Exp3;
EOr.    Exp1  ::= Exp1 "||" Exp2;

-- Comparisons
EEq.  Exp  ::= Exp "==" Exp1;
ELt.  Exp4 ::= Exp4 "<" Exp5;
EGt.  Exp4 ::= Exp4 ">" Exp5;
ELeq. Exp4 ::= Exp4 "<=" Exp5;
EGeq. Exp4 ::= Exp4 ">=" Exp5;

-- Control flow
EIf.  Exp8 ::= "if" Exp "then" Exp "else" Exp;

-- Let bindings
ELet. Exp8 ::= "let" Ident "=" Exp "in" Exp;
EVar. Exp8 ::= Ident;

-- Phase 2: Top/Bot types
ETt.     Exp8 ::= "tt";
EMagic.  Exp8 ::= "magic";

-- Phase 2: Boolean eliminator  
EElimBool. Exp8 ::= "elimBool" Exp8 Exp8 Exp8 Exp8;

-- Phase 2: Pair types
EPair.   Exp8 ::= "(" Exp "," Exp ")";
EFst.    Exp8 ::= "fst" Exp8;
ESnd.    Exp8 ::= "snd" Exp8;

-- Phase 3: Vector types
ENil.    Exp8 ::= "[]";
EHead.   Exp8 ::= "head" Exp8;
ETail.   Exp8 ::= "tail" Exp8;
EAppend. Exp8 ::= "append" Exp8 Exp8;

-- Vector cons operation (right associative, lower precedence)
ECons.   Exp2 ::= Exp3 "::" Exp2;

-- Functions
EApp. Exp8 ::= Exp8 Exp7;

-- This part sets up the order of operation
_. Exp8 ::= "(" Exp ")" ;
_. Exp7 ::= Exp8 ;
_. Exp6 ::= Exp7 ;
_. Exp5 ::= Exp6 ;
_. Exp4 ::= Exp5 ;
_. Exp3 ::= Exp4 ;
_. Exp2 ::= Exp3 ;
_. Exp1 ::= Exp2 ;
_. Exp  ::= Exp1 ;
